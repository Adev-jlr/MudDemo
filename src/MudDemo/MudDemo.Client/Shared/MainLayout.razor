@inherits LayoutComponentBase
@using Toolbelt.Blazor.HotKeys
@using Blazored.LocalStorage
@using MudDemo.Client.Models
@implements IDisposable
@inject IDialogService _dialogService
@inject HotKeys _hotKeys
@inject ILocalStorageService _localStorage

<MudDialogProvider />
<MudSnackbarProvider />
<MudThemeProvider Theme="_theme" />

<MudLayout >
    <MudAppBar Class="px-8"
               Elevation="0"
               Style="@(_themeManager.IsDarkMode ? "background: rgba(21,27,34,0.7)" : "background: rgba(255,255,255,0.7)")">
        @if (!_canMiniSideMenuDrawer)
        {
            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                <MudTooltip Arrow="true"
                            Text="Toggle menu">
                    <MudIconButton Class="mr-3"
                                   Color="Color.Default"
                                   Edge="Edge.Start"
                                   Icon="@Icons.Material.Filled.Menu"
                                   OnClick="ToggleMenu" />
                </MudTooltip>
            </MudHidden>
        }
        <MudTooltip Arrow="true"
                    Text="Search (Cmd + K)">
            <MudIconButton Color="Color.Default"
                           Edge="Edge.Start"
                           Icon="@Icons.Material.Filled.Search"
                           OnClick="OpenCommandPalette" />
        </MudTooltip>
        <MudSpacer />
        <MudTooltip Arrow="true"
                    Text="Navigate to GitHub">
            <MudIconButton Class="mx-3"
                           Color="Color.Default"
                           Icon="@Icons.Custom.Brands.GitHub"
                           Link="https://github.com/Alexandre789010/MudDemo"
                           Target="_blank" />
        </MudTooltip>
        <MudTooltip Arrow="true"
                    Text="Notifications">
            <MudBadge Class="mx-3"
                      Color="Color.Error"
                      Dot="true"
                      Overlap="true">
                <MudIconButton Color="Color.Default"
                               Icon="@Icons.Material.Filled.Notifications" />
            </MudBadge>
        </MudTooltip>
        <UserMenu Class="ml-3" />
    </MudAppBar>
    
    <SideMenu @bind-SideMenuDrawerOpen="_sideMenuDrawerOpen"
              @bind-CanMiniSideMenuDrawer="_canMiniSideMenuDrawer"
              User="_user"/> 
    
    <ThemesMenu ThemeManager="_themeManager"
                 ThemeManagerChanged="ThemeManagerChanged"
                 ThemingDrawerOpen="_themingDrawerOpen"
                 ThemingDrawerOpenChanged="ThemingDrawerOpenChanged"/>
    <ThemesButton OnClick="@((e) => ThemingDrawerOpenChanged(true))"/>
    
    <MudMainContent>
        <MudContainer Class="mb-16 mt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code{

    private readonly Palette _darkPalette = new()
    {
        Black = "#27272f",
        Background = "rgb(21,27,34)",
        BackgroundGrey = "#27272f",
        Surface = "#373740",
        DrawerBackground = "rgb(21,27,34)",
        DrawerText = "rgba(255,255,255, 0.50)",
        DrawerIcon = "rgba(255,255,255, 0.50)",
        AppbarBackground = "#27272f",
        AppbarText = "rgba(255,255,255, 0.70)",
        TextPrimary = "rgba(255,255,255, 0.70)",
        TextSecondary = "rgba(255,255,255, 0.50)",
        ActionDefault = "#adadb1",
        ActionDisabled = "rgba(255,255,255, 0.26)",
        ActionDisabledBackground = "rgba(255,255,255, 0.12)",
        Divider = "rgba(255,255,255, 0.12)",
        DividerLight = "rgba(255,255,255, 0.06)",
        TableLines = "rgba(255,255,255, 0.12)",
        LinesDefault = "rgba(255,255,255, 0.12)",
        LinesInputs = "rgba(255,255,255, 0.3)",
        TextDisabled = "rgba(255,255,255, 0.2)"
    };

    private readonly Palette _lightPalette = new();

    private readonly MudTheme _theme = new()
    {
        Palette = new Palette
        {
            Primary = Colors.Green.Default
        },
        LayoutProperties = new LayoutProperties
        {
            AppbarHeight = "80px",
            DefaultBorderRadius = "12px"
        },
        Typography = new Typography
        {
            Default = new Default
            {
                FontFamily = new[] {"Roboto", "Helvetica", "Arial", "sans-serif"},
                FontWeight = 400,
                FontSize = "0.9rem",
                LineHeight = 1.43,
                LetterSpacing = ".01071em"
            }
        }
    };

    private ThemeManagerModel _themeManager = new()
    {
        IsDarkMode = false,
        PrimaryColor = Colors.Green.Default
    };

    private UserModel _user = new()
    {
        Avatar = "./sample-data/avatar.png",
        DisplayName = "MudDemo",
        Email = "muddemo@demo.com.au",
        Role = "Admin"
    };
    
    private bool _sideMenuDrawerOpen;
    private bool _themingDrawerOpen;
    private bool _canMiniSideMenuDrawer = true;
    private HotKeysContext? _hotKeysContext;
    private bool _commandPaletteOpen;

    protected override async Task OnInitializedAsync()
    {
        if (await _localStorage.ContainKeyAsync("themeManager"))
            _themeManager = await _localStorage.GetItemAsync<ThemeManagerModel>("themeManager");

        await ThemeManagerChanged(_themeManager);

        _hotKeysContext = _hotKeys.CreateContext().Add(ModKeys.Meta, Keys.K, OpenCommandPalette, "Open command palette.");
    }

    public void Dispose()
    {
        _hotKeysContext?.Dispose();
    }

    private void ToggleMenu()
    {
        _sideMenuDrawerOpen = !_sideMenuDrawerOpen;
    }

    private void ThemingDrawerOpenChanged(bool value)
    {
        _themingDrawerOpen = value;
    }

    private async Task ThemeManagerChanged(ThemeManagerModel themeManager)
    {
        _themeManager = themeManager;

        _theme.Palette = _themeManager.IsDarkMode ? _darkPalette : _lightPalette;
        _theme.Palette.Primary = _themeManager.PrimaryColor;

        await UpdateThemeManagerLocalStorage();
    }

    private async Task OpenCommandPalette()
    {
        if (!_commandPaletteOpen)
        {
            var options = new DialogOptions
            {
                NoHeader = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };

            var commandPalette = _dialogService.Show<CommandPalette>("", options);
            _commandPaletteOpen = true;

            await commandPalette.Result;
            _commandPaletteOpen = false;
        }
    }

    private async Task UpdateThemeManagerLocalStorage()
    {
        await _localStorage.SetItemAsync("themeManager", _themeManager);
    }

}